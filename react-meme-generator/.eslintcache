[{"/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/index.js":"1","/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/App.js":"2","/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/Form.js":"3","/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/Meme.js":"4","/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/Preview.js":"5"},{"size":222,"mtime":1608236775011,"results":"6","hashOfConfig":"7"},{"size":3508,"mtime":1608249426937,"results":"8","hashOfConfig":"7"},{"size":1155,"mtime":1608236775010,"results":"9","hashOfConfig":"7"},{"size":649,"mtime":1608249559807,"results":"10","hashOfConfig":"7"},{"size":377,"mtime":1608237000119,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"wnmcuf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/index.js",[],["24","25"],"/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/App.js",["26"],"import Form from './Form';\nimport Preview from './Preview';\nimport Meme from './Meme';\nimport './App.css';\nimport './Form.css'\nimport React from 'react'\n\nlet imgIncrementer = 0\nlet completedIncrementer = 0\nlet imgincrementer = 0\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      canEdit: false,\n      topText: \"\", \n      bottomText: \"\",\n      memes: [],\n      completedMemes: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this)\n    this.handleRefresh = this.handleRefresh.bind(this)\n    this.handleEdit = this.handleEdit.bind(this)\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n  //I was thinking of the this.state.memes to this.state.potentialMemes to be a little more clear\n  componentDidMount(){\n    fetch(\"https://api.imgflip.com/get_memes\")\n        .then( res => res.json())\n        .then(res => this.setState({memes: res.data.memes[imgIncrementer].url\n        }))\n        .catch(err => console.log(err))\n}\n\n  \n  handleChange(event){\n    const{name, value} = event.target\n    this.setState({\n      [name]: value\n    })\n  }\n  handleRefresh(event){\n    event.preventDefault() //would not let me go to the next image wthout refreshing if i didn't do this.smh. i think it's because the button is in a form.\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then( res => res.json())\n      .then( res => this.setState({memes: res.data.memes[imgIncrementer = imgIncrementer + 1].url}))\n      .catch(err => (console.log(err)))\n    \n  }\n  handleEdit(event) {\n    event.preventDefault()\n    this.setState((prevState)=>{\n      return {\n      canEdit: !prevState.canEdit\n      }\n    }\n    )\n  }\n  handleClick(event){\n    event.preventDefault()\n    this.setState(\n      function(prevState) {\n        return {\n          topText: \"\",\n          bottomText: \"\",\n          completedMemes: [\n              ...prevState.completedMemes,\n              {\n                topText: prevState.topText,\n                bottomText: prevState.bottomText,\n                memes: prevState.memes\n              }\n          ]\n        }\n    })\n    \n  }\n  handleDelete(event){\n\n  }\n  \n  render(){\n    const mappedCompletedMemes = this.state.completedMemes.map(\n      function(meme) {\n        return (\n          <Meme handleEdit = {()=>(this.handleEdit())} incrementer = {completedIncrementer} top={meme.topText} bottom={meme.bottomText} img={meme.memes}/>\n        )\n      }\n    )\n    //handleEdit needed to be in an arrow function for some reason.\n    if(this.state.canEdit === false) {\n        return (\n          <div className=\"App\">\n            <Form \n            handleClick={this.handleClick} \n            handleChange = {this.handleChange} \n            handleRefresh = {this.handleRefresh}\n            handleDelete = {this.handleDelete}\n\n            />\n            <Preview img = {this.state.memes} top={this.state.topText} bottom ={this.state.bottomText}/>\n            {mappedCompletedMemes}\n          </div>\n        ) \n      ;\n    }\n\n    if(this.state.canEdit === true){\n      return (\n        <div className=\"App\">\n          <Form \n            handleClick={this.handleClick} \n            handleChange = {this.handleChange} \n            handleRefresh = {this.handleRefresh} \n            handleDelete = {this.handleDelete}\n            topText = {this.state.topText}\n            bottomText = {this.state.bottomText}/>\n          {mappedCompletedMemes}\n        </div>\n      ) \n    ;\n  }\n  \n}\n}\n\nexport default App;\n","/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/Form.js",[],"/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/Meme.js",[],"/Users/joshuabenbaba/Documents/react-meme-generator/react-meme-generator/src/Preview.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":10,"column":5,"nodeType":"33","messageId":"34","endLine":10,"endColumn":19},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'imgincrementer' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]